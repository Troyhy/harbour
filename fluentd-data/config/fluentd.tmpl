## File input
## read docker logs with tag=docker.container

{{range $key, $value := .}}{{ $logs := $value.Env.LOG }}{{ if $logs }}

<source>
  type tail
  format json
  time_key time
  time_format %Y-%m-%dT%H:%M:%S.%N%Z
  path /var/lib/docker/containers/{{ $value.ID }}/{{ $value.ID }}-json.log
  pos_file /var/lib/docker/containers/{{ $value.ID }}/{{ $value.ID }}-json.log.pos
  tag docker.container.{{printf "%.*s" 12 $value.ID}}
  rotate_wait 5
</source>

<match docker.container.{{printf "%.*s" 12 $value.ID}}>
  type docker_format
  docker_containers_path /var/lib/docker/containers
  container_id {{ $value.ID }}
  {{ $log_tag := $value.Env.LOG_TAG }}
  tag {{ $log_tag }}
  {{ if $log_tag }}
  {{ else }}
  tag raw.docker.{{printf "%.*s" 12 $value.ID}}
  {{ end }}
</match>

{{end}}{{ end }}

<source>
  type syslog
  port 5140
  bind 0.0.0.0
  tag system
</source>


#<match docker.filtered.**>
#  type exclude_filter
#  key stream
#  value stdout
#  regexp false # default false, string comparison
#  add_tag_prefix stderr
#</match>

<match raw.**>
    type color_stripper
    tag parse.docker
</match>


<match parse.**>
  type parser
  key_name log
  format multi_format
  <pattern>
    format /^[^"]*"(?<host>[^ ]*)" "(?<remote>[^ ]*)" "-" "(?<user>[^ ]*)" \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)";? "(?<agent>[^\"]*)")?$/
  </pattern>
  <pattern>
    format json
    time_key timestamp
  </pattern>
  <pattern>
    format none
  </pattern>
  remove_prefix parse
</match>


<match docker.**>
  type elasticsearch
  host {{ .Env.ES_HOST }}
  port {{ .Env.ES_PORT }}
  index_name docker
  type_name messages
  logstash_format true
  include_tag_key true
  flush_interval 10
</match>

<match system.**>
  type elasticsearch
  host {{ .Env.ES_HOST }}
  port {{ .Env.ES_PORT }}
  index_name syslog
  type_name syslog
  logstash_format true
  include_tag_key true
</match>



# Nginx access log, should come in with strip.parse.nginx.access
<match strip.parse.nginx.access>
    type color_stripper
    tag parse.nginx.access
</match>

<match parse.nginx.access>
  type parser
  key_name log
  format multi_format
  <pattern>
    format /^(?<newfmt>)[^"]*"(?<host>[^ ]*)" "(?<remote>[^ ]*)" "-" "(?<user>[^ ]*)" \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*) (?: "(?<referer>[^\"]*)";? "(?<agent>[^\"]*)")?$/
    time_key @timestamp
  </pattern>
  <pattern>
    format json
    time_key timestamp
  </pattern>
  <pattern>
    format none
  </pattern>
  remove_prefix parse
</match>


<match nginx.access>
  type elasticsearch
  host {{ .Env.ES_HOST }}
  port {{ .Env.ES_PORT }}
  index_name nginx
  type_name access_log
  logstash_format true
  include_tag_key true
  flush_interval 10
  logstash_prefix nginx
</match>


<match **>
  type elasticsearch
  host {{ .Env.ES_HOST }}
  port {{ .Env.ES_PORT }}
  index_name docker
  type_name catchall
  class warn
  logstash_format true
  include_tag_key true
</match>